// Generated by CoffeeScript 1.8.0
(function() {
  var path;

  path = require('path');

  String.prototype.path_Combine = function(pathToAppend) {
    if (pathToAppend) {
      return path.join(this.toString(), pathToAppend);
    } else {
      return this.toString();
    }
  };

  String.prototype.file_Dir_Name = function() {
    return path.dirname(this);
  };

  String.prototype.file_Parent_Folder = String.prototype.file_Dir_Name;

  String.prototype.parent_Folder = String.prototype.file_Dir_Name;

  String.prototype.file_Extension = function() {
    return path.extname(this.toString());
  };

  String.prototype.file_Name = function() {
    return path.basename(this.toString());
  };

  Array.prototype.file_Names = function() {
    var file, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      file = this[_i];
      _results.push(file.file_Name());
    }
    return _results;
  };

  String.prototype.append_To_Process_Cwd_Path = function() {
    return process.cwd().path_Combine(this.toString());
  };

  String.prototype.file_Name_Without_Extension = function() {
    return path.basename(this.toString()).replace(this.toString().file_Extension(), "");
  };

  Array.prototype.file_Names_Without_Extension = function() {
    var file, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      file = this[_i];
      _results.push(file.file_Name_Without_Extension());
    }
    return _results;
  };

  String.prototype.folder_Name = function() {
    return this.valueOf().file_Name();
  };

}).call(this);
