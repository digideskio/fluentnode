// Generated by CoffeeScript 1.8.0
(function() {
  var Server, http, https, url, _base;

  http = require('http');

  https = require('https');

  url = require('url');

  Server = http.Server;

  if (global.__fluentnode == null) {
    global.__fluentnode = {};
  }

  if ((_base = global.__fluentnode).http == null) {
    _base.http = {};
  }

  using(global.__fluentnode.http, function() {
    this.HTTP_GET_TIMEOUT = 500;
    return this.HTTP_GET_DELAY = 10;
  });

  Server.prototype.add_Sockets_Close_Suport = function() {
    this._sockets = {};
    this._socket_Count = 0;
    this.on('connection', (function(_this) {
      return function(socket) {
        var socket_id;
        socket_id = _this._socket_Count++;
        _this._sockets[socket_id] = socket;
        return socket.on('close', function() {
          return delete _this._sockets[socket_id];
        });
      };
    })(this));
    return this;
  };

  Server.prototype.close_And_Destroy_Sockets = function(callback) {
    var socket_Id;
    if (this._sockets !== void 0) {
      for (socket_Id in this._sockets) {
        this._sockets[socket_Id].destroy();
        delete this._sockets[socket_Id];
      }
    }
    return this.close(function() {
      return callback();
    });
  };

  Server.prototype.listen_OnPort_Saying = function(port, text, callback) {
    var ip;
    ip = '127.0.0.1';
    return this.respond_With_String_As_Text(text).add_Sockets_Close_Suport().listen(port, ip, function() {
      return callback();
    });
  };

  Server.prototype.respond_With_Request_Headers = function(value) {
    var simple_Response;
    delete this._events.request;
    simple_Response = function(req, res) {
      res.writeHead(200, {
        'Content-Type': 'application/json'
      });
      return res.end(req.headers.json_Str());
    };
    this.addListener('request', simple_Response);
    return this;
  };

  Server.prototype.respond_With_Request_Url = function(value) {
    var simple_Response;
    delete this._events.request;
    simple_Response = function(req, res) {
      var data;
      res.writeHead(200, {
        'Content-Type': 'application/json'
      });
      data = {
        url: req.url
      };
      return res.end(data.json_Str());
    };
    this.addListener('request', simple_Response);
    return this;
  };

  Server.prototype.respond_With_String_As_Text = function(value) {
    var simple_Response;
    delete this._events.request;
    simple_Response = function(req, res) {
      res.writeHead(200, {
        'Content-Type': 'text/plain'
      });
      return res.end(value);
    };
    this.addListener('request', simple_Response);
    return this;
  };

  Server.prototype.respond_With_Object_As_Json = function(value) {
    var json_Response;
    delete this._events.request;
    json_Response = function(req, res) {
      res.writeHead(200, {
        'Content-Type': 'application/json'
      });
      return res.end(value.json_Str());
    };
    this.addListener('request', json_Response);
    return this;
  };

  Server.prototype.respond_With_Request_Object = function() {
    var json_Response;
    delete this._events.request;
    json_Response = function(req, res) {
      res.writeHead(200, {
        'Content-Type': 'application/json'
      });
      return res.end(req.json_Inspect());
    };
    this.addListener('request', json_Response);
    return this;
  };

  String.prototype.http_Status = function(callback) {
    return http.get(this.str(), function(res) {
      return callback(res.statusCode);
    });
  };

  String.prototype.http_GET = function(callback) {
    var engine, req;
    url = url.parse(this.str());
    engine = url.protocol === 'https:' ? https : http;
    req = engine.get(this.str(), function(res) {
      var data;
      data = '';
      res.on('data', function(chunk) {
        return data += chunk;
      });
      return res.on('end', function() {
        return callback(null, data, res);
      });
    });
    req.on('error', function(err) {
      return callback(err, null, null);
    });
    return req;
  };

  String.prototype.GET = function(callback) {
    return this.http_GET(function(error, data, res) {
      return callback(data);
    });
  };

  String.prototype.GET_Json = function(callback) {
    return this.http_GET(function(error, data, res) {
      if (data) {
        return callback(data.json_Parse());
      } else {
        return callback({});
      }
    });
  };

  String.prototype.json_GET = String.prototype.GET_Json;

  String.prototype.json_GET_With_Timeout = function(callback) {
    return this.http_GET_With_Timeout(function(data) {
      if (data) {
        return callback(data.json_Parse());
      } else {
        return callback({});
      }
    });
  };

  String.prototype.http_GET_Wait_For_Null = function(callback) {
    var attempts, delay, run_Tests, timeout, try_Http_Get;
    timeout = global.__fluentnode.http.HTTP_GET_TIMEOUT;
    delay = global.__fluentnode.http.HTTP_GET_DELAY;
    attempts = ~~(timeout / delay);
    try_Http_Get = (function(_this) {
      return function(next) {
        return _this.GET(function(data) {
          if (data) {
            return next.invoke_In(delay);
          } else {
            return callback(null);
          }
        });
      };
    })(this);
    run_Tests = (function(_this) {
      return function(count) {
        if (count) {
          return try_Http_Get(function() {
            return run_Tests(count - 1);
          });
        } else {
          return callback(new Error("[http_GET_Wait_For_Null] never got a null from server " + _this + " after " + attempts + " attempts"));
        }
      };
    })(this);
    return run_Tests(attempts);
  };

  String.prototype.http_GET_With_Timeout = function(callback) {
    var attempts, delay, run_Tests, timeout, try_Http_Get;
    timeout = global.__fluentnode.http.HTTP_GET_TIMEOUT;
    delay = global.__fluentnode.http.HTTP_GET_DELAY;
    attempts = ~~(timeout / delay);
    try_Http_Get = (function(_this) {
      return function(next) {
        return _this.GET(function(data) {
          if (data) {
            return callback(data);
          } else {
            return delay.invoke_After(next);
          }
        });
      };
    })(this);
    run_Tests = (function(_this) {
      return function(count) {
        if (count) {
          return try_Http_Get(function() {
            return run_Tests(count - 1);
          });
        } else {
          return callback(null);
        }
      };
    })(this);
    return run_Tests(attempts);
  };

  String.prototype.http_With_Options = function(options, callback) {
    var engine, req;
    url = url.parse(this.str());
    engine = url.protocol === 'https:' ? https : http;
    options.hostname = options.hostname || url.hostname;
    options.port = options.port || url.port;
    options.path = options.path || url.path;
    options.method = options.method || 'GET';
    req = engine.get(options, function(res) {
      var data;
      data = '';
      res.on('data', function(chunk) {
        return data += chunk;
      });
      return res.on('end', function() {
        return callback(null, data, res);
      });
    });
    req.on('error', function(err) {
      return callback(err, null, null);
    });
    return req;
  };


  /*options =
      hostname: @,
      port: port,
      path: '/',
      method: 'GET'
      console.log @.str()
   */

}).call(this);
